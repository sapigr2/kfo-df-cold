"""
Crypto Sentinel Scanner ‚Äî —Å–∞–º—ã–π –º–æ—â–Ω—ã–π Python-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π:
- –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ—à–µ–ª—å–∫–æ–≤ (cold/warm)
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (whale alert)
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (scam drop detector)
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ email –∏ Telegram

–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Etherscan API. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ CLI-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
"""

import requests
import argparse
import datetime
import smtplib
import ssl
from email.mime.text import MIMEText


ETHERSCAN_API = "https://api.etherscan.io/api"


def fetch_transactions(address, api_key, action="txlist"):
    params = {
        "module": "account",
        "action": action,
        "address": address,
        "startblock": 0,
        "endblock": 99999999,
        "sort": "desc",
        "apikey": api_key
    }
    r = requests.get(ETHERSCAN_API, params=params)
    return r.json().get("result", [])


def analyze_wallet_activity(txs, months_idle=12):
    if not txs:
        return "üîí –ö–æ—à–µ–ª—ë–∫ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω."
    last_tx = txs[0]
    timestamp = int(last_tx["timeStamp"])
    last_active_date = datetime.datetime.utcfromtimestamp(timestamp)
    now = datetime.datetime.utcnow()
    delta = now - last_active_date

    if delta.days >= months_idle * 30:
        return f"üßä –ö–æ—à–µ–ª—ë–∫ —Ö–æ–ª–æ–¥–Ω—ã–π (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ {months_idle} –º–µ—Å.): {last_active_date.strftime('%Y-%m-%d')}"
    else:
        return f"üî• –ö–æ—à–µ–ª—ë–∫ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active_date.strftime('%Y-%m-%d')} ({delta.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)"


def detect_large_transactions(txs, min_eth=100):
    results = []
    for tx in txs:
        eth_value = int(tx["value"]) / 1e18
        if eth_value >= min_eth:
            results.append({
                "from": tx["from"],
                "to": tx["to"],
                "value": eth_value,
                "hash": tx["hash"],
                "timestamp": datetime.datetime.utcfromtimestamp(int(tx["timeStamp"])).strftime("%Y-%m-%d %H:%M:%S")
            })
    return results


def detect_scam_airdrops(txs):
    suspicious = []
    for tx in txs:
        from_addr = tx["from"].lower()
        token_name = tx.get("tokenName", "").lower()
        if from_addr.startswith("0x000") or "airdrop" in token_name or "claim" in token_name:
            suspicious.append({
                "token": tx.get("tokenName", ""),
                "from": from_addr,
                "to": tx["to"],
                "value": tx.get("value"),
                "hash": tx["hash"]
            })
    return suspicious


def send_email_notification(subject, body, sender, password, recipient):
    msg = MIMEText(body)
    msg['Subject'] = subject
    msg['From'] = sender
    msg['To'] = recipient

    context = ssl.create_default_context()
    with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
        server.login(sender, password)
        server.sendmail(sender, recipient, msg.as_string())


def send_telegram_message(token, chat_id, message):
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    requests.post(url, data={"chat_id": chat_id, "text": message})


def main():
    parser = argparse.ArgumentParser(description="Crypto Sentinel Scanner ‚Äî –∑–∞—â–∏—Ç–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Ethereum-–∫–æ—à–µ–ª—å–∫–æ–≤.")
    parser.add_argument("address", help="Ethereum-–∞–¥—Ä–µ—Å")
    parser.add_argument("api_key", help="Etherscan API Key")
    parser.add_argument("--min_eth", type=float, default=100, help="–ü–æ—Ä–æ–≥ –∫—Ä—É–ø–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (ETH)")
    parser.add_argument("--months_idle", type=int, default=12, help="–°–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ —Å—á–∏—Ç–∞—Ç—å –∫–æ—à–µ–ª—ë–∫ 'cold'")
    parser.add_argument("--email", help="Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    parser.add_argument("--email_pass", help="–ü–∞—Ä–æ–ª—å –ø–æ—á—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
    parser.add_argument("--email_from", help="Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
    parser.add_argument("--telegram_token", help="Telegram Bot Token")
    parser.add_argument("--telegram_chat", help="Telegram Chat ID")
    args = parser.parse_args()

    print("üì° –°–∫–∞–Ω–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å:", args.address)

    normal_txs = fetch_transactions(args.address, args.api_key)
    token_txs = fetch_transactions(args.address, args.api_key, action="tokentx")

    report = []

    # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity = analyze_wallet_activity(normal_txs, args.months_idle)
    report.append(activity)

    # –ê–Ω–∞–ª–∏–∑ whale-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    whales = detect_large_transactions(normal_txs, args.min_eth)
    report.append(f"üê≥ –ù–∞–π–¥–µ–Ω–æ {len(whales)} –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
    for tx in whales:
        report.append(f"- {tx['timestamp']}: {tx['value']} ETH | {tx['from']} ‚Üí {tx['to']}")

    # Airdrop scam
    scams = detect_scam_airdrops(token_txs)
    report.append(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(scams)} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.")
    for s in scams:
        report.append(f"- {s['token']} | –æ—Ç {s['from']} | —Ö—ç—à: {s['hash']}")

    full_report = "\n".join(report)
    print("\nüìã –û—Ç—á—ë—Ç:\n")
    print(full_report)

    if args.email and args.email_pass and args.email_from:
        send_email_notification("üõ° Crypto Sentinel Alert", full_report, args.email_from, args.email_pass, args.email)

    if args.telegram_token and args.telegram_chat:
        send_telegram_message(args.telegram_token, args.telegram_chat, full_report)


if __name__ == "__main__":
    main()
